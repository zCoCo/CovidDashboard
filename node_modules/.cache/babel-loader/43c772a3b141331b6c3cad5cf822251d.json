{"remainingRequest":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue","mtime":1587353559409},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IExNYXAgfSBmcm9tICd2dWUyLWxlYWZsZXQnOwppbXBvcnQgeyBJbmZvQ29udHJvbCwgUmVmZXJlbmNlQ2hhcnQsIENob3JvcGxldGhMYXllciB9IGZyb20gJ3Z1ZS1jaG9yb3BsZXRoJzsgLy8gTG9hZCBNYXAgRGF0YToKLy8gR2VvSlNPTiBNYXAgT3V0bGluZXMgYXQgdmFyeWluZyByZXNvbHV0aW9uczoKCmltcG9ydCBvdXRsaW5lX3VzIGZyb20gJ0AvZGF0YS9nZW8vdXNfb3V0bGluZV8yMG0uanMnOwppbXBvcnQgb3V0bGluZV9zdGF0ZXMgZnJvbSAnQC9kYXRhL2dlby91c19zdGF0ZXNfMjBtLmpzJzsKaW1wb3J0IG91dGxpbmVfY291bnRpZXMgZnJvbSAnQC9kYXRhL2dlby91c19jb3VudGllc18yMG1fYmFja3VwLmpzJzsKaW1wb3J0IG91dGxpbmVfY29uZ3Jlc3MgZnJvbSAnQC9kYXRhL2dlby91c19jb25ncmVzc2lvbmFsMjAxMF8yMG0uanMnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ01hcCcsCiAgcHJvcHM6IHsKICAgIGNvcmVEYXRhOiB7CiAgICAgIC8vIENvcmUgRGF0YSB0byBiZSBSZXByZXNlbnRlZAogICAgICB0eXBlOiBBcnJheSwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBvdXRsaW5lczogewogICAgICAgIFVTOiBvdXRsaW5lX3VzLAogICAgICAgIHN0YXRlczogb3V0bGluZV9zdGF0ZXMsCiAgICAgICAgY291bnRpZXM6IG91dGxpbmVfY291bnRpZXMsCiAgICAgICAgY29uZ3Jlc3M6IG91dGxpbmVfY29uZ3Jlc3MKICAgICAgfSwKICAgICAgY29sb3JTY2FsZTogWyJlN2QwOTAiLCAiZTlhZTdiIiwgImRlNzA2MiJdLAogICAgICBjdXJyZW50U3Ryb2tlQ29sb3I6ICczZDMyMTMnLAogICAgICB2YWx1ZTogewogICAgICAgIGtleTogImNhc2VzIiwKICAgICAgICBtZXRyaWM6ICIgQ29uZmlybWVkIENhc2VzIgogICAgICB9LAogICAgICBleHRyYVZhbHVlczogW3sKICAgICAgICBrZXk6ICJkZWF0aHMiLAogICAgICAgIG1ldHJpYzogIkNvbmZpcm1lZCBEZWF0aHMiCiAgICAgIH1dLAogICAgICBtYXBPcHRpb25zOiB7CiAgICAgICAgYXR0cmlidXRpb25Db250cm9sOiBmYWxzZQogICAgICB9CiAgICB9OwogIH0sCiAgY29tcG9uZW50czogewogICAgJ2wtbWFwJzogTE1hcCwKICAgICdsLWluZm8tY29udHJvbCc6IEluZm9Db250cm9sLAogICAgJ2wtcmVmZXJlbmNlLWNoYXJ0JzogUmVmZXJlbmNlQ2hhcnQsCiAgICAnbC1jaG9yb3BsZXRoLWxheWVyJzogQ2hvcm9wbGV0aExheWVyCiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge30sCiAgbWV0aG9kczogewogICAgZm9ybWF0UmF3RGF0YTogZnVuY3Rpb24gZm9ybWF0UmF3RGF0YSgpIHsKICAgICAgLy8gQWRkcyBmaXBzIGZpZWxkIHRvIGNvdW50eSBkYXRhOgogICAgICB0aGlzLm91dGxpbmVzLmNvdW50aWVzLmZlYXR1cmVzLmZvckVhY2goZnVuY3Rpb24gKGMpIHsKICAgICAgICAvLyBDcmVhdGUgZmlwcyBpZGVudGlmaWVyOgogICAgICAgIGMucHJvcGVydGllcy5maXBzID0gYy5wcm9wZXJ0aWVzLkdFT19JRC5zdWJzdHIoLTUpOyAvLyBSZW1vdmUgcmVkdW5kYW50IGFuZCB1bm5lY2Vzc2FyeSBwcm9wZXJ0aWVzOgoKICAgICAgICBkZWxldGUgYy5wcm9wZXJ0aWVzLkdFT19JRDsKICAgICAgICBkZWxldGUgYy5wcm9wZXJ0aWVzLkNPVU5UWTsKICAgICAgICBkZWxldGUgYy5wcm9wZXJ0aWVzLkxTQUQ7CiAgICAgICAgZGVsZXRlIGMucHJvcGVydGllcy5DRU5TVVNBUkVBOwogICAgICB9KTsKICAgICAgdmFyIHN0ciA9IEpTT04uc3RyaW5naWZ5KHRoaXMub3V0bGluZXMuY291bnRpZXMsIG51bGwsIDEpOyAvL3N0ciA9IHN0ci5yZXBsYWNlKC8oPzwhfSwpXG5cdyooPz1bXntdKS9nLCAnICcpOwoKICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xuL2csICcgJyk7CiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8gKy9nLCAnICcpOwogICAgICBzdHIgPSBzdHIucmVwbGFjZSgvfSwgKnsvZywgJ31cbixcbnsnKTsKICAgICAgY29uc29sZS5sb2coc3RyKTsKICAgICAgY29uc29sZS5sb2coIkNvdW50aWVzIEZvcm1hdHRlZC4iKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAAA,IAAA,QAAA,cAAA;AACA,SAAA,WAAA,EAAA,cAAA,EAAA,eAAA,QAAA,gBAAA,C,CAEA;AACA;;AACA,OAAA,UAAA,MAAA,8BAAA;AACA,OAAA,cAAA,MAAA,6BAAA;AACA,OAAA,gBAAA,MAAA,sCAAA;AACA,OAAA,gBAAA,MAAA,wCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAFA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA,MAAA,QAAA,EAAA;AACA,QAAA,EAAA,EAAA,UADA;AAEA,QAAA,MAAA,EAAA,cAFA;AAGA,QAAA,QAAA,EAAA,gBAHA;AAIA,QAAA,QAAA,EAAA;AAJA,OADA;AAOA,MAAA,UAAA,EAAA,CAAA,QAAA,EAAA,QAAA,EAAA,QAAA,CAPA;AAQA,MAAA,kBAAA,EAAA,QARA;AASA,MAAA,KAAA,EAAA;AACA,QAAA,GAAA,EAAA,OADA;AAEA,QAAA,MAAA,EAAA;AAFA,OATA;AAaA,MAAA,WAAA,EAAA,CAAA;AACA,QAAA,GAAA,EAAA,QADA;AAEA,QAAA,MAAA,EAAA;AAFA,OAAA,CAbA;AAiBA,MAAA,UAAA,EAAA;AACA,QAAA,kBAAA,EAAA;AADA;AAjBA,KAAA;AAqBA,GA9BA;AA+BA,EAAA,UAAA,EAAA;AACA,aAAA,IADA;AAEA,sBAAA,WAFA;AAGA,yBAAA,cAHA;AAIA,0BAAA;AAJA,GA/BA;AAqCA,EAAA,OArCA,qBAqCA,CACA,CAtCA;AAuCA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AACA;AACA,WAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,UAAA,CAAA,EAAA;AACA;AACA,QAAA,CAAA,CAAA,UAAA,CAAA,IAAA,GAAA,CAAA,CAAA,UAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAFA,CAGA;;AACA,eAAA,CAAA,CAAA,UAAA,CAAA,MAAA;AACA,eAAA,CAAA,CAAA,UAAA,CAAA,MAAA;AACA,eAAA,CAAA,CAAA,UAAA,CAAA,IAAA;AACA,eAAA,CAAA,CAAA,UAAA,CAAA,UAAA;AACA,OARA;AASA,UAAA,GAAA,GAAA,IAAA,CAAA,SAAA,CAAA,KAAA,QAAA,CAAA,QAAA,EAAA,IAAA,EAAA,CAAA,CAAA,CAXA,CAYA;;AACA,MAAA,GAAA,GAAA,GAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA,MAAA,GAAA,GAAA,GAAA,CAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACA,MAAA,GAAA,GAAA,GAAA,CAAA,OAAA,CAAA,QAAA,EAAA,SAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,qBAAA;AACA;AAnBA;AAvCA,CAAA","sourcesContent":["<template>\n  <div class=\"map\">\n    <l-map\n      :center=\"[98.5795, 39.8283] /* Geographic Center of the US */ \"\n      :zoom=\"1\"\n      style=\"height: 500px;\"\n      :options=\"mapOptions\">\n        <l-choropleth-layer\n          :data=\"coreData\"\n          titleKey=\"county\"\n          idKey=\"fips\"\n          :value=\"value\"\n          :extraValues=\"extraValues\"\n          geojsonIdKey=\"fips\"\n          :geojson=\"outlines.counties\"\n          :colorScale=\"colorScale\">\n            <template slot-scope=\"props\">\n              <l-info-control\n                :item=\"props.currentItem\"\n                :unit=\"props.unit\"\n                title=\"Region\"\n                placeholder=\"Hover over a region\"/>\n              <l-reference-chart\n                title=\"Girls school enrolment\"\n                :colorScale=\"colorScale\"\n                :min=\"props.min\"\n                :max=\"props.max\"\n                position=\"topright\"/>\n            </template>\n        </l-choropleth-layer>\n    </l-map>\n  </div>\n</template>\n\n<script>\nimport { LMap } from 'vue2-leaflet'\nimport { InfoControl, ReferenceChart, ChoroplethLayer } from 'vue-choropleth'\n\n// Load Map Data:\n// GeoJSON Map Outlines at varying resolutions:\nimport outline_us from '@/data/geo/us_outline_20m.js'\nimport outline_states from '@/data/geo/us_states_20m.js'\nimport outline_counties from '@/data/geo/us_counties_20m_backup.js'\nimport outline_congress from '@/data/geo/us_congressional2010_20m.js'\n\nexport default {\n  name: 'Map',\n  props: {\n    coreData: { // Core Data to be Represented\n      type: Array,\n      required: true\n    },\n  },\n  data(){\n    return {\n      outlines: {\n        US: outline_us,\n        states: outline_states,\n        counties: outline_counties,\n        congress: outline_congress\n      },\n      colorScale: [\"e7d090\", \"e9ae7b\", \"de7062\"],\n      currentStrokeColor: '3d3213',\n      value: {\n        key: \"cases\",\n        metric: \" Confirmed Cases\"\n      },\n      extraValues: [{\n        key: \"deaths\",\n        metric: \"Confirmed Deaths\"\n      }],\n      mapOptions: {\n        attributionControl: false\n      }\n    }\n  },\n  components: {\n    'l-map': LMap,\n    'l-info-control': InfoControl,\n    'l-reference-chart': ReferenceChart,\n    'l-choropleth-layer': ChoroplethLayer\n  },\n  mounted() {\n  },\n  methods: {\n    formatRawData(){\n      // Adds fips field to county data:\n      this.outlines.counties.features.forEach( c => {\n        // Create fips identifier:\n        c.properties.fips = c.properties.GEO_ID.substr(-5);\n        // Remove redundant and unnecessary properties:\n        delete c.properties.GEO_ID;\n        delete c.properties.COUNTY;\n        delete c.properties.LSAD;\n        delete c.properties.CENSUSAREA;\n      });\n      let str = JSON.stringify(this.outlines.counties, null, 1);\n      //str = str.replace(/(?<!},)\\n\\w*(?=[^{])/g, ' ');\n      str = str.replace(/\\n/g, ' ');\n      str = str.replace(/ +/g, ' ');\n      str = str.replace(/}, *{/g, '}\\n,\\n{');\n      console.log(str);\n      console.log(\"Counties Formatted.\");\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  @import \"~leaflet/dist/leaflet.css\";\n\n</style>\n"],"sourceRoot":"src/components"}]}