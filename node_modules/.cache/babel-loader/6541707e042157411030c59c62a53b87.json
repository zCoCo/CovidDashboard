{"remainingRequest":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/views/Home.vue","mtime":1587453510779},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"home\">\n    <Map\n      :geoData=\"activeMap\"\n      :coreData=\"activeData\"\n      :value=\"{\n        key: 'cases',\n        metric: ' Confirmed Cases'\n      }\"\n    />\n  </div>\n</template>\n\n<script>\nimport Map from '@/components/Map.vue'\n\nimport { NovelCovid } from 'novelcovid'\nimport census from 'citysdk'\n\nimport moment from 'moment'\nimport * as util from '@/util.js'\n\nconst DATE_FORMAT = \"YYYY-MM-DD\";\n\nexport default {\n  name: 'Home',\n  components: {\n    Map\n  },\n  data() {\n    return {\n      day: moment(), // Day being displayed (today by default)\n      resolution: 'counties', // Resolution being displayed\n      track: new NovelCovid(), // Covid data procurement object\n      countyFIPS: new Set(), // FIPS IDs of all counties represented in the data\n      geoData: { // Geographic and census data\n        us: {},\n        states: {},\n        counties: {}\n      },\n      covidData: { // Full history of Covid data\n        us: [],\n        states: [],\n        counties: []\n      },\n      checklist: { // Which data elements have been loaded / computed\n        geoData: { // Geographic and census data\n          states: 0,\n          counties: 0\n        },\n        covidData: { // Full history of Covid data\n          counties: 0\n        },\n        combo: 0 // Computed metadata combining geo and covid data\n      }\n    }\n  },\n  created(){\n    console.log(\"Loading Geographic and Census Data . . .\");\n    this.loadGeoData();\n    console.log(\"Loading Covid Data . . .\");\n    this.loadCovidData();\n  },\n\n  methods: {\n    // Does what it says on the tin (loads geographic and census data).\n    loadGeoData(){\n      // Load County Data:\n      console.log('\\t > County . . .');\n      census(\n        {\n          vintage: 2018, // most recent complete dataset\n          geoHierarchy: { county: '*' },\n          geoResolution: \"20m\",\n          sourcePath: [\"acs\", \"acs5\"],\n          values: [\"B01001_001E\"] // population\n        },\n        (err,res) => {\n          if(err){\n            return console.error(\"Failed to load county data.\", err);\n          }\n          this.geoData.counties = res;\n\n          // Get housing data:\n          census(\n            {\n              vintage: 2018,\n              geoHierarchy: { county: '*' },\n              sourcePath: [ \"acs\", \"acs5\", \"profile\" ],\n              values: [ \"DP02_0001E\" ]\n            },\n            (err,res) => {\n              if(err){\n                return console.error(\"Failed to load county household data.\", err);\n              }\n              const self = this;\n              // Merge datasets:\n              res.forEach( d => {\n                this.geoData.counties.features.find( x => x.properties.GEOID === d.state + d.county ).properties.DP02_0001E = d.DP02_0001E;\n              });\n              console.log(\"County-Level Geo Data Loaded.\");\n            }\n          );\n        }\n      );\n      // Load State Data\n      console.log('\\t > State . . .');\n      census(\n        {\n          vintage: 2018, // most recent complete dataset\n          geoHierarchy: { state: '*' },\n          geoResolution: \"20m\",\n          sourcePath: [\"acs\", \"acs5\"],\n          values: [\"B01001_001E\"] // population\n        },\n        (err,res) => {\n          if(err){\n            return console.error(\"Failed to load county data.\", err);\n          }\n          this.geoData.states = res;\n\n          // Get housing data:\n          census(\n            {\n              vintage: 2018,\n              geoHierarchy: { state: '*' },\n              sourcePath: [ \"acs\", \"acs5\", \"profile\" ],\n              values: [ \"DP02_0001E\" ]\n            },\n            (err,res) => {\n              if(err){\n                return console.error(\"Failed to load state household data.\", err);\n              }\n              // Merge datasets:\n              res.forEach( d => {\n                this.geoData.states.features.find( x => x.properties.GEOID === d.state ).properties.DP02_0001E = d.DP02_0001E;\n              });\n              console.log(\"County-Level Geo Data Loaded.\");\n            }\n          );\n        }\n      );\n    },\n\n    // Does what it says on the tin (+ formats it and computes metaparams).\n    loadCovidData(){\n      console.log(\"\\t > County . . .\");\n      this.track.nytCounties().then(\n        data => {\n          // Extract Date Properties:\n          data.forEach( d => {\n            d.day = moment(d.date, DATE_FORMAT);\n          });\n\n          // Collect the IDs of all counties:\n          data.forEach( d => {\n            this.countyFIPS.add(d.fips);\n          });\n\n          // Fill in any missing days:\n          this.countyFIPS.forEach( fips => { // For every county:\n            // Collect the indices corresponding to each for the county:\n            let entries = data.filter( d => d.fips === fips );\n            // Get date range of data:\n            let dates = entries.map( d => d.day );\n            let firstDay = moment.min(dates);\n\n            // For every entry, check to see if an entry exists for that county\n            // for the next day (if not tomorrow), if it doesn't exist, create it.\n            let today = moment(); // Compute this once so it remains fixed during iteration\n            let day = firstDay.clone();\n            let currDayData = entries.find( d => d.day.isSame(day) );\n            currDayData.collection_date = day.format(DATE_FORMAT); // Add reference to original date of collection\n            while( day.isBefore(today, 'day') ){\n              let nextDay = day.clone().add(1,'d');\n              let nextDayData = entries.find( d => d.day.isSame(nextDay) );\n\n              if(nextDayData === undefined){\n                // Create copy of current data but with the next day's date:\n                nextDayData = { ...currDayData };\n                nextDayData.day = nextDay;\n                nextDayData.date = nextDay.format(DATE_FORMAT);\n                nextDayData.collection_date = currDayData.collection_date; // Preserve reference to original date of collection\n\n                data.push(nextDayData); // Add reference to original dataset for later use\n              } else {\n                nextDayData.collection_date = nextDayData.date; // Add reference to original date of collection for data uniformity\n              }\n\n              currDayData = nextDayData;\n              day = nextDay;\n            }\n          });\n\n          this.covidData.counties = data;\n          console.log(\"Covid Data Loaded.\");\n        },\n        err => {\n          console.error(\"Couldn't load county Covid data.\", err);\n        }\n      );\n    }\n  },\n  computed: {\n    // Compute data to be fed to the choropleth which combines geographic,\n    // census, and covid data.\n    comboData(){\n      let combo = this.covidData; // note: this will also modify covidData. That's fine. Mainly this prop is used to add reactivity.\n\n      // Pre-compute additional data:\n      // per capita, per household, per area, per density\n      for(const res in combo){\n        if(Object.prototype.hasOwnProperty.call(this.geoData[res], 'features')){\n          // Only modify data for the selected day:\n          let data = combo[res].filter( d => d.day.isSame(this.day, 'day') );\n          // For every region:\n          this.geoData[res].features.forEach( region => {\n            // Grab relevant metadata:\n            let pop = region.properties.B01001_001E;\n            let houses = region.properties.DP02_0001E;\n            let area = region.properties.ALAND / 2.59e6; // m^2 -> mi^2\n            let density = pop/area;\n            // Grab all covid entries for the region:\n            let entries = data.filter( d => d.fips === region.properties.GEOID );\n            // Add metadata to each entry:\n            entries.forEach( e => {\n              if(res === 'counties' && !e.county.includes(\"County\")){\n                e.county = e.county + \" County\"; // Clearly separate names of counties from states\n              }\n              e.pop = pop - e.deaths;\n              e.population = util.formatPopulation(e.pop);\n              e.households = util.formatPopulation(houses);\n              e.area = area;\n              e.density = util.formatPopulation(density);\n              e.cases_per_cap = util.formatPopulation(e.cases / e.pop * 1e6);\n              e.cases_per_house = util.formatPopulation(e.cases / houses * 1e6);\n              e.cases_per_area = e.cases / area;\n              e.cases_per_dens = util.formatPopulation(e.cases / density);\n              e.deaths_per_cap = util.formatPopulation(e.deaths / e.pop * 1e6);\n              e.deaths_per_house = util.formatPopulation(e.deaths / houses * 1e6);\n              e.deaths_per_area = e.deaths / area;\n              e.deaths_per_dens = util.formatPopulation(e.deaths / density);\n            });\n          });\n        }\n      }\n\n      console.log(\"Combo Data Updated.\");\n      return combo;\n    },\n    // Returns the GeoJSON being displayed on the map:\n    activeMap(){\n      return this.geoData[this.resolution];\n    },\n    // Returns the data being displayed:\n    activeData(){\n      // Find most recent data on or before selected day:\n      return this.comboData[this.resolution].filter( d => d.day.isSame(this.day, 'day') );\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n\n</style>\n"],"sourceRoot":"src/views"}]}