{"remainingRequest":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue","mtime":1587452926747},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBMTWFwIH0gZnJvbSAndnVlMi1sZWFmbGV0JzsKaW1wb3J0IHsgSW5mb0NvbnRyb2wsIFJlZmVyZW5jZUNoYXJ0LCBDaG9yb3BsZXRoTGF5ZXIgfSBmcm9tICd2dWUtY2hvcm9wbGV0aCc7IC8vIExvYWQgTWFwIERhdGE6Ci8vIEdlb0pTT04gTWFwIE91dGxpbmVzIGF0IHZhcnlpbmcgcmVzb2x1dGlvbnM6CgppbXBvcnQgb3V0bGluZV91cyBmcm9tICdAL2RhdGEvZ2VvL3VzX291dGxpbmVfMjBtLmpzJzsgLy8gaW1wb3J0IG91dGxpbmVfc3RhdGVzIGZyb20gJ0AvZGF0YS9nZW8vdXNfc3RhdGVzXzIwbS5qcycKLy8gaW1wb3J0IG91dGxpbmVfY291bnRpZXMgZnJvbSAnQC9kYXRhL2dlby91c19jb3VudGllc18yMG1fZmlwcy5qcycKLy8gaW1wb3J0IG91dGxpbmVfY29uZ3Jlc3MgZnJvbSAnQC9kYXRhL2dlby91c19jb25ncmVzc2lvbmFsMjAxMF8yMG0uanMnCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ01hcCcsCiAgcHJvcHM6IHsKICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBnZW9EYXRhOiB7CiAgICAgIC8vIENvcmUgRGF0YSB0byBiZSBSZXByZXNlbnRlZAogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgY29yZURhdGE6IHsKICAgICAgLy8gQ29yZSBEYXRhIHRvIGJlIFJlcHJlc2VudGVkCiAgICAgIHR5cGU6IEFycmF5LAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvbG9yU2NhbGU6IFsnI2Y2ZTVjNScsICcjZjdiNTM4JywgJyNlODlmM2MnLCAnI2RlODY0YScsICcjZDY2OTVjJywgJyNjMjU3NGMnLCAnI2FkNDUzYycsICcjOTgzNDJlJywgJyM4MjI0MjAnLCAnIzZjMTQxNCcsICcjNTQwODA0J10sCiAgICAgIG1hcE9wdGlvbnM6IHsKICAgICAgICBhdHRyaWJ1dGlvbkNvbnRyb2w6IHRydWUKICAgICAgfQogICAgfTsKICB9LAogIGNvbXBvbmVudHM6IHsKICAgICdsLW1hcCc6IExNYXAsCiAgICAnbC1pbmZvLWNvbnRyb2wnOiBJbmZvQ29udHJvbCwKICAgICdsLXJlZmVyZW5jZS1jaGFydCc6IFJlZmVyZW5jZUNoYXJ0LAogICAgJ2wtY2hvcm9wbGV0aC1sYXllcic6IENob3JvcGxldGhMYXllcgogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHt9LAogIG1ldGhvZHM6IHsKICAgIC8qCiAgICBVbmNvbW1lbnQgaWYgeW91J3JlIGxvYWRpbmcgbmV3IFVTIEdlb0pTT04gZGF0YSBhbmQgd2FudCB0byBmb3JtYXQgYW5kCiAgICBjb25kZW5zZSBpdCB3aGlsZSBzdGlsbCBhbGxvd2luZyBmb3IgZmFzdCBsb2FkaW5nLgogICAgZm9ybWF0UmF3RGF0YSgpewogICAgICAvLyBBZGRzIGZpcHMgZmllbGQgdG8gY291bnR5IGRhdGE6CiAgICAgIHRoaXMub3V0bGluZXMuY291bnRpZXMuZmVhdHVyZXMuZm9yRWFjaCggYyA9PiB7CiAgICAgICAgLy8gQ3JlYXRlIGZpcHMgaWRlbnRpZmllcjoKICAgICAgICBjLnByb3BlcnRpZXMuZmlwcyA9IGMucHJvcGVydGllcy5HRU9fSUQuc3Vic3RyKC01KTsKICAgICAgICAvLyBSZW1vdmUgcmVkdW5kYW50IGFuZCB1bm5lY2Vzc2FyeSBwcm9wZXJ0aWVzOgogICAgICAgIGRlbGV0ZSBjLnByb3BlcnRpZXMuR0VPX0lEOwogICAgICAgIGRlbGV0ZSBjLnByb3BlcnRpZXMuQ09VTlRZOwogICAgICAgIGRlbGV0ZSBjLnByb3BlcnRpZXMuTFNBRDsKICAgICAgICBkZWxldGUgYy5wcm9wZXJ0aWVzLkNFTlNVU0FSRUE7CiAgICAgIH0pOwogICAgICBsZXQgc3RyID0gSlNPTi5zdHJpbmdpZnkodGhpcy5vdXRsaW5lcy5jb3VudGllcywgbnVsbCwgMSk7CiAgICAgIC8vc3RyID0gc3RyLnJlcGxhY2UoLyg/PCF9LClcblx3Kig/PVtee10pL2csICcgJyk7IC8vIDwtIGRpZmZlcmVudCBmb3JtYXR0aW5nIG9wdGlvbgogICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXG4vZywgJyAnKTsKICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyArL2csICcgJyk7CiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC99LCAqey9nLCAnfVxuLFxueycpOwogICAgICBjb25zb2xlLmxvZyhzdHIpOwogICAgICBjb25zb2xlLmxvZygiQ291bnRpZXMgRm9ybWF0dGVkLiIpOwogICAgfSovCiAgfSwKICBjb21wdXRlZDogewogICAgLy8gUmV0dXJuIHRoZSBtYXAgZGF0YSB0byBiZSBkaXNwbGF5ZWQ6CiAgICBtYXBEYXRhOiBmdW5jdGlvbiBtYXBEYXRhKCkgewogICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5nZW9EYXRhKS5sZW5ndGggPT09IDApIHsKICAgICAgICAvLyBJZiBlbXB0eSBHZW9EYXRhIHdhcyBnaXZlbiwgZGlzcGxheSBVUyBvdXRsaW5lIGJ5IGRlZmF1bHQKICAgICAgICByZXR1cm4gb3V0bGluZV91czsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuZ2VvRGF0YTsKICAgIH0sCiAgICBleHRyYVZhbHVlczogZnVuY3Rpb24gZXh0cmFWYWx1ZXMoKSB7CiAgICAgIC8vIExpc3Qgb2YgZWxlbWVudHMgdGhhdCBhcmUgZ3VhcmFudGVlZCB0byBiZSBpbiB0aGUgZXh0cmEgdmFsdWVzIGxpc3Q6CiAgICAgIHZhciBtdXN0ID0gW3sKICAgICAgICBrZXk6ICJjb2xsZWN0aW9uX2RhdGUiLAogICAgICAgIG1ldHJpYzogIihjbG9zZXN0IHByaW9yIGNvbGxlY3Rpb24gZGF0ZSkiCiAgICAgIH1dOyAvLyBMaXN0IG9mIGVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGluIHRoZSBleHRyYSB2YWx1ZXMgbGlzdDoKCiAgICAgIHZhciBleHRyYXMgPSBbewogICAgICAgIGtleTogJ2Nhc2VzJywKICAgICAgICBtZXRyaWM6ICcgQ29uZmlybWVkIENhc2VzJwogICAgICB9LCB7CiAgICAgICAga2V5OiAnZGVhdGhzJywKICAgICAgICBtZXRyaWM6ICcgQ29uZmlybWVkIERlYXRocycKICAgICAgfSwgewogICAgICAgIGtleTogJ3BvcHVsYXRpb24nLAogICAgICAgIG1ldHJpYzogJyBQZW9wbGUnCiAgICAgIH0sIHsKICAgICAgICBrZXk6ICdob3VzZWhvbGRzJywKICAgICAgICBtZXRyaWM6ICcgSG91c2Vob2xkcycKICAgICAgfSwgewogICAgICAgIGtleTogJ2RlbnNpdHknLAogICAgICAgIG1ldHJpYzogJyBQZW9wbGUgLyBTcS4gTWlsZScKICAgICAgfV07IC8vIEFkZCB1c2VmdWwgZmllbGRzIGJ1dCBkb24ndCByZXBlYXQgdGhlIG1haW4gdmFsdWU6CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4dHJhcy5sZW5ndGg7ICsraSkgewogICAgICAgIGlmICh0aGlzLnZhbHVlLmtleSA9PT0gZXh0cmFzW2ldLmtleSkgewogICAgICAgICAgZXh0cmFzLnNwbGljZShpLCAxKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBbXS5jb25jYXQoZXh0cmFzLCBtdXN0KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAAA,IAAA,QAAA,cAAA;AACA,SAAA,WAAA,EAAA,cAAA,EAAA,eAAA,QAAA,gBAAA,C,CAEA;AACA;;AACA,OAAA,UAAA,MAAA,8BAAA,C,CACA;AACA;AACA;;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,OAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KALA;AASA,IAAA,QAAA,EAAA;AAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA;AATA,GAFA;AAgBA,EAAA,IAhBA,kBAgBA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,CAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,CADA;AAEA,MAAA,UAAA,EAAA;AACA,QAAA,kBAAA,EAAA;AADA;AAFA,KAAA;AAMA,GAvBA;AAwBA,EAAA,UAAA,EAAA;AACA,aAAA,IADA;AAEA,sBAAA,WAFA;AAGA,yBAAA,cAHA;AAIA,0BAAA;AAJA,GAxBA;AA8BA,EAAA,OA9BA,qBA8BA,CACA,CA/BA;AAgCA,EAAA,OAAA,EAAA;AACA;;;;;;;;;;;;;;;;;;;;;;AADA,GAhCA;AAwDA,EAAA,QAAA,EAAA;AACA;AACA,IAAA,OAFA,qBAEA;AACA,UAAA,MAAA,CAAA,IAAA,CAAA,KAAA,OAAA,EAAA,MAAA,KAAA,CAAA,EAAA;AAAA;AACA,eAAA,UAAA;AACA;;AACA,aAAA,KAAA,OAAA;AACA,KAPA;AASA,IAAA,WATA,yBASA;AACA;AACA,UAAA,IAAA,GAAA,CACA;AACA,QAAA,GAAA,EAAA,iBADA;AAEA,QAAA,MAAA,EAAA;AAFA,OADA,CAAA,CAFA,CAQA;;AACA,UAAA,MAAA,GAAA,CACA;AACA,QAAA,GAAA,EAAA,OADA;AAEA,QAAA,MAAA,EAAA;AAFA,OADA,EAKA;AACA,QAAA,GAAA,EAAA,QADA;AAEA,QAAA,MAAA,EAAA;AAFA,OALA,EASA;AACA,QAAA,GAAA,EAAA,YADA;AAEA,QAAA,MAAA,EAAA;AAFA,OATA,EAaA;AACA,QAAA,GAAA,EAAA,YADA;AAEA,QAAA,MAAA,EAAA;AAFA,OAbA,EAiBA;AACA,QAAA,GAAA,EAAA,SADA;AAEA,QAAA,MAAA,EAAA;AAFA,OAjBA,CAAA,CATA,CA+BA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA;AACA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA;AACA;AACA;;AACA,uBAAA,MAAA,EAAA,IAAA;AACA;AA/CA;AAxDA,CAAA","sourcesContent":["<template>\n  <div class=\"map\">\n    <l-map\n      :center=\"[39.8283, -98.5795] /* Geographic Center of the US */ \"\n      :zoom=\"4\"\n      style=\"height: 500px;\"\n      :options=\"mapOptions\">\n        <l-choropleth-layer\n          :data=\"coreData\"\n          titleKey=\"county\"\n          idKey=\"fips\"\n          :value=\"value\"\n          :extraValues=\"extraValues\"\n          geojsonIdKey=\"GEOID\"\n          strokeColor=\"9c9c9c\"\n          currentStrokeColor=\"efefef\"\n          :strokeWidth=\"0.3\"\n          :currentStrokeWidth=\"2\"\n          :geojson=\"mapData\"\n          :colorScale=\"colorScale\">\n            <template slot-scope=\"props\">\n              <l-info-control\n                :item=\"props.currentItem\"\n                :unit=\"props.unit\"\n                title=\"Region Data\"\n                placeholder=\"Hover over a region\"/>\n              <l-reference-chart\n                :title=\"value.metric.trim()\"\n                :colorScale=\"colorScale\"\n                :min=\"props.min\"\n                :max=\"props.max\"\n                position=\"topright\"/>\n            </template>\n        </l-choropleth-layer>\n    </l-map>\n  </div>\n</template>\n\n<script>\nimport { LMap } from 'vue2-leaflet'\nimport { InfoControl, ReferenceChart, ChoroplethLayer } from 'vue-choropleth'\n\n// Load Map Data:\n// GeoJSON Map Outlines at varying resolutions:\nimport outline_us from '@/data/geo/us_outline_20m.js'\n// import outline_states from '@/data/geo/us_states_20m.js'\n// import outline_counties from '@/data/geo/us_counties_20m_fips.js'\n// import outline_congress from '@/data/geo/us_congressional2010_20m.js'\n\nexport default {\n  name: 'Map',\n  props: {\n    value: {\n      type: Object,\n      required: true\n    },\n    geoData: { // Core Data to be Represented\n      type: Object,\n      required: true\n    },\n    coreData: { // Core Data to be Represented\n      type: Array,\n      required: true\n    },\n  },\n  data(){\n    return {\n      colorScale: ['#f6e5c5','#f7b538', '#e89f3c','#de864a', '#d6695c','#c2574c', '#ad453c','#98342e', '#822420','#6c1414', '#540804'],\n      mapOptions: {\n        attributionControl: true\n      }\n    }\n  },\n  components: {\n    'l-map': LMap,\n    'l-info-control': InfoControl,\n    'l-reference-chart': ReferenceChart,\n    'l-choropleth-layer': ChoroplethLayer\n  },\n  mounted() {\n  },\n  methods: {\n    /*\n    Uncomment if you're loading new US GeoJSON data and want to format and\n    condense it while still allowing for fast loading.\n    formatRawData(){\n      // Adds fips field to county data:\n      this.outlines.counties.features.forEach( c => {\n        // Create fips identifier:\n        c.properties.fips = c.properties.GEO_ID.substr(-5);\n        // Remove redundant and unnecessary properties:\n        delete c.properties.GEO_ID;\n        delete c.properties.COUNTY;\n        delete c.properties.LSAD;\n        delete c.properties.CENSUSAREA;\n      });\n      let str = JSON.stringify(this.outlines.counties, null, 1);\n      //str = str.replace(/(?<!},)\\n\\w*(?=[^{])/g, ' '); // <- different formatting option\n      str = str.replace(/\\n/g, ' ');\n      str = str.replace(/ +/g, ' ');\n      str = str.replace(/}, *{/g, '}\\n,\\n{');\n      console.log(str);\n      console.log(\"Counties Formatted.\");\n    }*/\n  },\n  computed: {\n    // Return the map data to be displayed:\n    mapData(){\n      if(Object.keys(this.geoData).length === 0){ // If empty GeoData was given, display US outline by default\n        return outline_us;\n      }\n      return this.geoData;\n    },\n\n    extraValues(){\n      // List of elements that are guaranteed to be in the extra values list:\n      let must = [\n        {\n          key: \"collection_date\",\n          metric: \"(closest prior collection date)\"\n        }\n      ];\n      // List of elements that should be in the extra values list:\n      let extras = [\n        {\n          key: 'cases',\n          metric: ' Confirmed Cases'\n        },\n        {\n          key: 'deaths',\n          metric: ' Confirmed Deaths'\n        },\n        {\n          key: 'population',\n          metric: ' People'\n        },\n        {\n          key: 'households',\n          metric: ' Households'\n        },\n        {\n          key: 'density',\n          metric: ' People / Sq. Mile'\n        }\n      ];\n      // Add useful fields but don't repeat the main value:\n      for(let i = 0; i < extras.length; ++i){\n        if(this.value.key === extras[i].key){\n          extras.splice(i,1);\n        }\n      }\n      return [...extras, ...must];\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  @import \"~leaflet/dist/leaflet.css\";\n\n</style>\n"],"sourceRoot":"src/components"}]}