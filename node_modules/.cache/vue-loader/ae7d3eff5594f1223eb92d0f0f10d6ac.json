{"remainingRequest":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue","mtime":1587452926747},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IExNYXAgfSBmcm9tICd2dWUyLWxlYWZsZXQnCmltcG9ydCB7IEluZm9Db250cm9sLCBSZWZlcmVuY2VDaGFydCwgQ2hvcm9wbGV0aExheWVyIH0gZnJvbSAndnVlLWNob3JvcGxldGgnCgovLyBMb2FkIE1hcCBEYXRhOgovLyBHZW9KU09OIE1hcCBPdXRsaW5lcyBhdCB2YXJ5aW5nIHJlc29sdXRpb25zOgppbXBvcnQgb3V0bGluZV91cyBmcm9tICdAL2RhdGEvZ2VvL3VzX291dGxpbmVfMjBtLmpzJwovLyBpbXBvcnQgb3V0bGluZV9zdGF0ZXMgZnJvbSAnQC9kYXRhL2dlby91c19zdGF0ZXNfMjBtLmpzJwovLyBpbXBvcnQgb3V0bGluZV9jb3VudGllcyBmcm9tICdAL2RhdGEvZ2VvL3VzX2NvdW50aWVzXzIwbV9maXBzLmpzJwovLyBpbXBvcnQgb3V0bGluZV9jb25ncmVzcyBmcm9tICdAL2RhdGEvZ2VvL3VzX2NvbmdyZXNzaW9uYWwyMDEwXzIwbS5qcycKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnTWFwJywKICBwcm9wczogewogICAgdmFsdWU6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGdlb0RhdGE6IHsgLy8gQ29yZSBEYXRhIHRvIGJlIFJlcHJlc2VudGVkCiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBjb3JlRGF0YTogeyAvLyBDb3JlIERhdGEgdG8gYmUgUmVwcmVzZW50ZWQKICAgICAgdHlwZTogQXJyYXksCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogIH0sCiAgZGF0YSgpewogICAgcmV0dXJuIHsKICAgICAgY29sb3JTY2FsZTogWycjZjZlNWM1JywnI2Y3YjUzOCcsICcjZTg5ZjNjJywnI2RlODY0YScsICcjZDY2OTVjJywnI2MyNTc0YycsICcjYWQ0NTNjJywnIzk4MzQyZScsICcjODIyNDIwJywnIzZjMTQxNCcsICcjNTQwODA0J10sCiAgICAgIG1hcE9wdGlvbnM6IHsKICAgICAgICBhdHRyaWJ1dGlvbkNvbnRyb2w6IHRydWUKICAgICAgfQogICAgfQogIH0sCiAgY29tcG9uZW50czogewogICAgJ2wtbWFwJzogTE1hcCwKICAgICdsLWluZm8tY29udHJvbCc6IEluZm9Db250cm9sLAogICAgJ2wtcmVmZXJlbmNlLWNoYXJ0JzogUmVmZXJlbmNlQ2hhcnQsCiAgICAnbC1jaG9yb3BsZXRoLWxheWVyJzogQ2hvcm9wbGV0aExheWVyCiAgfSwKICBtb3VudGVkKCkgewogIH0sCiAgbWV0aG9kczogewogICAgLyoKICAgIFVuY29tbWVudCBpZiB5b3UncmUgbG9hZGluZyBuZXcgVVMgR2VvSlNPTiBkYXRhIGFuZCB3YW50IHRvIGZvcm1hdCBhbmQKICAgIGNvbmRlbnNlIGl0IHdoaWxlIHN0aWxsIGFsbG93aW5nIGZvciBmYXN0IGxvYWRpbmcuCiAgICBmb3JtYXRSYXdEYXRhKCl7CiAgICAgIC8vIEFkZHMgZmlwcyBmaWVsZCB0byBjb3VudHkgZGF0YToKICAgICAgdGhpcy5vdXRsaW5lcy5jb3VudGllcy5mZWF0dXJlcy5mb3JFYWNoKCBjID0+IHsKICAgICAgICAvLyBDcmVhdGUgZmlwcyBpZGVudGlmaWVyOgogICAgICAgIGMucHJvcGVydGllcy5maXBzID0gYy5wcm9wZXJ0aWVzLkdFT19JRC5zdWJzdHIoLTUpOwogICAgICAgIC8vIFJlbW92ZSByZWR1bmRhbnQgYW5kIHVubmVjZXNzYXJ5IHByb3BlcnRpZXM6CiAgICAgICAgZGVsZXRlIGMucHJvcGVydGllcy5HRU9fSUQ7CiAgICAgICAgZGVsZXRlIGMucHJvcGVydGllcy5DT1VOVFk7CiAgICAgICAgZGVsZXRlIGMucHJvcGVydGllcy5MU0FEOwogICAgICAgIGRlbGV0ZSBjLnByb3BlcnRpZXMuQ0VOU1VTQVJFQTsKICAgICAgfSk7CiAgICAgIGxldCBzdHIgPSBKU09OLnN0cmluZ2lmeSh0aGlzLm91dGxpbmVzLmNvdW50aWVzLCBudWxsLCAxKTsKICAgICAgLy9zdHIgPSBzdHIucmVwbGFjZSgvKD88IX0sKVxuXHcqKD89W157XSkvZywgJyAnKTsgLy8gPC0gZGlmZmVyZW50IGZvcm1hdHRpbmcgb3B0aW9uCiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cbi9nLCAnICcpOwogICAgICBzdHIgPSBzdHIucmVwbGFjZSgvICsvZywgJyAnKTsKICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL30sICp7L2csICd9XG4sXG57Jyk7CiAgICAgIGNvbnNvbGUubG9nKHN0cik7CiAgICAgIGNvbnNvbGUubG9nKCJDb3VudGllcyBGb3JtYXR0ZWQuIik7CiAgICB9Ki8KICB9LAogIGNvbXB1dGVkOiB7CiAgICAvLyBSZXR1cm4gdGhlIG1hcCBkYXRhIHRvIGJlIGRpc3BsYXllZDoKICAgIG1hcERhdGEoKXsKICAgICAgaWYoT2JqZWN0LmtleXModGhpcy5nZW9EYXRhKS5sZW5ndGggPT09IDApeyAvLyBJZiBlbXB0eSBHZW9EYXRhIHdhcyBnaXZlbiwgZGlzcGxheSBVUyBvdXRsaW5lIGJ5IGRlZmF1bHQKICAgICAgICByZXR1cm4gb3V0bGluZV91czsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5nZW9EYXRhOwogICAgfSwKCiAgICBleHRyYVZhbHVlcygpewogICAgICAvLyBMaXN0IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGd1YXJhbnRlZWQgdG8gYmUgaW4gdGhlIGV4dHJhIHZhbHVlcyBsaXN0OgogICAgICBsZXQgbXVzdCA9IFsKICAgICAgICB7CiAgICAgICAgICBrZXk6ICJjb2xsZWN0aW9uX2RhdGUiLAogICAgICAgICAgbWV0cmljOiAiKGNsb3Nlc3QgcHJpb3IgY29sbGVjdGlvbiBkYXRlKSIKICAgICAgICB9CiAgICAgIF07CiAgICAgIC8vIExpc3Qgb2YgZWxlbWVudHMgdGhhdCBzaG91bGQgYmUgaW4gdGhlIGV4dHJhIHZhbHVlcyBsaXN0OgogICAgICBsZXQgZXh0cmFzID0gWwogICAgICAgIHsKICAgICAgICAgIGtleTogJ2Nhc2VzJywKICAgICAgICAgIG1ldHJpYzogJyBDb25maXJtZWQgQ2FzZXMnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBrZXk6ICdkZWF0aHMnLAogICAgICAgICAgbWV0cmljOiAnIENvbmZpcm1lZCBEZWF0aHMnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBrZXk6ICdwb3B1bGF0aW9uJywKICAgICAgICAgIG1ldHJpYzogJyBQZW9wbGUnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBrZXk6ICdob3VzZWhvbGRzJywKICAgICAgICAgIG1ldHJpYzogJyBIb3VzZWhvbGRzJwogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAga2V5OiAnZGVuc2l0eScsCiAgICAgICAgICBtZXRyaWM6ICcgUGVvcGxlIC8gU3EuIE1pbGUnCiAgICAgICAgfQogICAgICBdOwogICAgICAvLyBBZGQgdXNlZnVsIGZpZWxkcyBidXQgZG9uJ3QgcmVwZWF0IHRoZSBtYWluIHZhbHVlOgogICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZXh0cmFzLmxlbmd0aDsgKytpKXsKICAgICAgICBpZih0aGlzLnZhbHVlLmtleSA9PT0gZXh0cmFzW2ldLmtleSl7CiAgICAgICAgICBleHRyYXMuc3BsaWNlKGksMSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBbLi4uZXh0cmFzLCAuLi5tdXN0XTsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"map\">\n    <l-map\n      :center=\"[39.8283, -98.5795] /* Geographic Center of the US */ \"\n      :zoom=\"4\"\n      style=\"height: 500px;\"\n      :options=\"mapOptions\">\n        <l-choropleth-layer\n          :data=\"coreData\"\n          titleKey=\"county\"\n          idKey=\"fips\"\n          :value=\"value\"\n          :extraValues=\"extraValues\"\n          geojsonIdKey=\"GEOID\"\n          strokeColor=\"9c9c9c\"\n          currentStrokeColor=\"efefef\"\n          :strokeWidth=\"0.3\"\n          :currentStrokeWidth=\"2\"\n          :geojson=\"mapData\"\n          :colorScale=\"colorScale\">\n            <template slot-scope=\"props\">\n              <l-info-control\n                :item=\"props.currentItem\"\n                :unit=\"props.unit\"\n                title=\"Region Data\"\n                placeholder=\"Hover over a region\"/>\n              <l-reference-chart\n                :title=\"value.metric.trim()\"\n                :colorScale=\"colorScale\"\n                :min=\"props.min\"\n                :max=\"props.max\"\n                position=\"topright\"/>\n            </template>\n        </l-choropleth-layer>\n    </l-map>\n  </div>\n</template>\n\n<script>\nimport { LMap } from 'vue2-leaflet'\nimport { InfoControl, ReferenceChart, ChoroplethLayer } from 'vue-choropleth'\n\n// Load Map Data:\n// GeoJSON Map Outlines at varying resolutions:\nimport outline_us from '@/data/geo/us_outline_20m.js'\n// import outline_states from '@/data/geo/us_states_20m.js'\n// import outline_counties from '@/data/geo/us_counties_20m_fips.js'\n// import outline_congress from '@/data/geo/us_congressional2010_20m.js'\n\nexport default {\n  name: 'Map',\n  props: {\n    value: {\n      type: Object,\n      required: true\n    },\n    geoData: { // Core Data to be Represented\n      type: Object,\n      required: true\n    },\n    coreData: { // Core Data to be Represented\n      type: Array,\n      required: true\n    },\n  },\n  data(){\n    return {\n      colorScale: ['#f6e5c5','#f7b538', '#e89f3c','#de864a', '#d6695c','#c2574c', '#ad453c','#98342e', '#822420','#6c1414', '#540804'],\n      mapOptions: {\n        attributionControl: true\n      }\n    }\n  },\n  components: {\n    'l-map': LMap,\n    'l-info-control': InfoControl,\n    'l-reference-chart': ReferenceChart,\n    'l-choropleth-layer': ChoroplethLayer\n  },\n  mounted() {\n  },\n  methods: {\n    /*\n    Uncomment if you're loading new US GeoJSON data and want to format and\n    condense it while still allowing for fast loading.\n    formatRawData(){\n      // Adds fips field to county data:\n      this.outlines.counties.features.forEach( c => {\n        // Create fips identifier:\n        c.properties.fips = c.properties.GEO_ID.substr(-5);\n        // Remove redundant and unnecessary properties:\n        delete c.properties.GEO_ID;\n        delete c.properties.COUNTY;\n        delete c.properties.LSAD;\n        delete c.properties.CENSUSAREA;\n      });\n      let str = JSON.stringify(this.outlines.counties, null, 1);\n      //str = str.replace(/(?<!},)\\n\\w*(?=[^{])/g, ' '); // <- different formatting option\n      str = str.replace(/\\n/g, ' ');\n      str = str.replace(/ +/g, ' ');\n      str = str.replace(/}, *{/g, '}\\n,\\n{');\n      console.log(str);\n      console.log(\"Counties Formatted.\");\n    }*/\n  },\n  computed: {\n    // Return the map data to be displayed:\n    mapData(){\n      if(Object.keys(this.geoData).length === 0){ // If empty GeoData was given, display US outline by default\n        return outline_us;\n      }\n      return this.geoData;\n    },\n\n    extraValues(){\n      // List of elements that are guaranteed to be in the extra values list:\n      let must = [\n        {\n          key: \"collection_date\",\n          metric: \"(closest prior collection date)\"\n        }\n      ];\n      // List of elements that should be in the extra values list:\n      let extras = [\n        {\n          key: 'cases',\n          metric: ' Confirmed Cases'\n        },\n        {\n          key: 'deaths',\n          metric: ' Confirmed Deaths'\n        },\n        {\n          key: 'population',\n          metric: ' People'\n        },\n        {\n          key: 'households',\n          metric: ' Households'\n        },\n        {\n          key: 'density',\n          metric: ' People / Sq. Mile'\n        }\n      ];\n      // Add useful fields but don't repeat the main value:\n      for(let i = 0; i < extras.length; ++i){\n        if(this.value.key === extras[i].key){\n          extras.splice(i,1);\n        }\n      }\n      return [...extras, ...must];\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  @import \"~leaflet/dist/leaflet.css\";\n\n</style>\n"]}]}