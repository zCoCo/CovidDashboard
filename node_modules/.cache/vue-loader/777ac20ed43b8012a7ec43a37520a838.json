{"remainingRequest":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/views/Home.vue","mtime":1587871341397},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"home\">\n    <Map\n      :geoData=\"activeMap\"\n      :coreData=\"activeData\"\n      :value=\"{\n        key: 'deaths_per_cap',\n        metric: ' Confirmed Deaths per 1M People'\n      }\"\n    />\n  </div>\n</template>\n\n<script>\nimport Map from '@/components/Map.vue'\n\nimport { NovelCovid } from 'novelcovid'\nimport census from 'citysdk'\n\nimport moment from 'moment'\nimport * as util from '@/util.js'\n\nconst DATE_FORMAT = \"YYYY-MM-DD\";\n\nexport default {\n  name: 'Home',\n  components: {\n    Map\n  },\n  data() {\n    return {\n      day: moment(), // Day being displayed (today by default)\n      resolution: 'counties', // Resolution being displayed\n      track: new NovelCovid(), // Covid data procurement object\n      countyFIPS: new Set(), // FIPS IDs of all counties represented in the data\n      geoData: { // Geographic and census data\n        us: {},\n        states: {},\n        counties: {}\n      },\n      covidData: { // Full history of Covid data\n        us: [],\n        states: [],\n        counties: []\n      },\n      checklist: { // Which data elements have been loaded / computed\n        geoData: { // Geographic and census data\n          states: 0,\n          counties: 0\n        },\n        covidData: { // Full history of Covid data\n          counties: 0\n        },\n        combo: 0 // Computed metadata combining geo and covid data\n      }\n    }\n  },\n  created(){\n    this.dataset = RegionalizedData.loadFromOnline();\n    /*\n    console.log(\"Loading Geographic and Census Data . . .\");\n    this.loadGeoData();\n    console.log(\"Loading Covid Data . . .\");\n    this.loadCovidData();*/\n  },\n\n  methods: {\n\n    choroplethData(){\n      this.dataset.map( region => {\n        let data = {fips: string(region.data.fips)};\n        data[this.choropleth_value] = region.data[choropleth_value][day_num-region.day_zero];\n        return data;\n      });\n    }\n\n    // Does what it says on the tin (loads geographic and census data).\n    loadGeoData(){\n      // Load County Data:\n      console.log('\\t > County . . .');\n      census(\n        {\n          vintage: 2018, // most recent complete dataset\n          geoHierarchy: { county: '*' },\n          geoResolution: \"20m\",\n          sourcePath: [\"acs\", \"acs5\"],\n          values: [\"B01001_001E\"] // population\n        },\n        (err,res) => {\n          if(err){\n            return console.error(\"Failed to load county data.\", err);\n          }\n          this.geoData.counties = res;\n\n          // Get housing data:\n          census(\n            {\n              vintage: 2018,\n              geoHierarchy: { county: '*' },\n              sourcePath: [ \"acs\", \"acs5\", \"profile\" ],\n              values: [ \"DP02_0001E\" ]\n            },\n            (err,res) => {\n              if(err){\n                return console.error(\"Failed to load county household data.\", err);\n              }\n              const self = this;\n              // Merge datasets:\n              res.forEach( d => {\n                this.geoData.counties.features.find( x => x.properties.GEOID === d.state + d.county ).properties.DP02_0001E = d.DP02_0001E;\n              });\n              console.log(\"County-Level Geo Data Loaded.\");\n            }\n          );\n        }\n      );\n      // Load State Data\n      console.log('\\t > State . . .');\n      census(\n        {\n          vintage: 2018, // most recent complete dataset\n          geoHierarchy: { state: '*' },\n          geoResolution: \"20m\",\n          sourcePath: [\"acs\", \"acs5\"],\n          values: [\"B01001_001E\"] // population\n        },\n        (err,res) => {\n          if(err){\n            return console.error(\"Failed to load county data.\", err);\n          }\n          this.geoData.states = res;\n\n          // Get housing data:\n          census(\n            {\n              vintage: 2018,\n              geoHierarchy: { state: '*' },\n              sourcePath: [ \"acs\", \"acs5\", \"profile\" ],\n              values: [ \"DP02_0001E\" ]\n            },\n            (err,res) => {\n              if(err){\n                return console.error(\"Failed to load state household data.\", err);\n              }\n              // Merge datasets:\n              res.forEach( d => {\n                this.geoData.states.features.find( x => x.properties.GEOID === d.state ).properties.DP02_0001E = d.DP02_0001E;\n              });\n              console.log(\"County-Level Geo Data Loaded.\");\n            }\n          );\n        }\n      );\n    },\n\n    // Does what it says on the tin (+ formats it and computes metaparams).\n    loadCovidData(){\n      console.log(\"\\t > County . . .\");\n      this.track.nytCounties().then(\n        data => {\n          // Extract Date Properties:\n          data.forEach( d => {\n            d.day = moment(d.date, DATE_FORMAT);\n          });\n\n          // Collect the IDs of all counties:\n          data.forEach( d => {\n            this.countyFIPS.add(d.fips);\n          });\n\n          // Fill in any missing days:\n          this.countyFIPS.forEach( fips => { // For every county:\n            // Collect the indices corresponding to each for the county:\n            let entries = data.filter( d => d.fips === fips );\n            // Get date range of data:\n            let dates = entries.map( d => d.day );\n            let firstDay = moment.min(dates);\n\n            // For every entry, check to see if an entry exists for that county\n            // for the next day (if not tomorrow), if it doesn't exist, create it.\n            let today = moment(); // Compute this once so it remains fixed during iteration\n            let day = firstDay.clone();\n            let currDayData = entries.find( d => d.day.isSame(day) );\n            currDayData.collection_date = day.format(DATE_FORMAT); // Add reference to original date of collection\n            while( day.isBefore(today, 'day') ){\n              let nextDay = day.clone().add(1,'d');\n              let nextDayData = entries.find( d => d.day.isSame(nextDay) );\n\n              if(nextDayData === undefined){\n                // Create copy of current data but with the next day's date:\n                nextDayData = { ...currDayData };\n                nextDayData.day = nextDay;\n                nextDayData.date = nextDay.format(DATE_FORMAT);\n                nextDayData.collection_date = currDayData.collection_date; // Preserve reference to original date of collection\n\n                data.push(nextDayData); // Add reference to original dataset for later use\n              } else {\n                nextDayData.collection_date = nextDayData.date; // Add reference to original date of collection for data uniformity\n              }\n\n              currDayData = nextDayData;\n              day = nextDay;\n            }\n          });\n\n          this.covidData.counties = data;\n          console.log(\"Covid Data Loaded.\");\n        },\n        err => {\n          console.error(\"Couldn't load county Covid data.\", err);\n        }\n      );\n    }\n  },\n  computed: {\n    // Compute data to be fed to the choropleth which combines geographic,\n    // census, and covid data.\n    comboData(){\n      let combo = this.covidData; // note: this will also modify covidData. That's fine. Mainly this prop is used to add reactivity.\n\n      // Pre-compute additional data:\n      // per capita, per household, per area, per density\n      for(const res in combo){\n        if(Object.prototype.hasOwnProperty.call(this.geoData[res], 'features')){\n          // Only modify data for the selected day:\n          let data = combo[res].filter( d => d.day.isSame(this.day, 'day') );\n          // For every region:\n          this.geoData[res].features.forEach( region => {\n            // Grab relevant metadata:\n            let pop = region.properties.B01001_001E;\n            let houses = region.properties.DP02_0001E;\n            let area = region.properties.ALAND / 2.59e6; // m^2 -> mi^2\n            let density = pop/area;\n            // Grab all covid entries for the region:\n            let entries = data.filter( d => d.fips === region.properties.GEOID );\n            // Add metadata to each entry:\n            entries.forEach( e => {\n              if(res === 'counties' && !e.county.includes(\"County\")){\n                e.county = e.county + \" County\"; // Clearly separate names of counties from states\n              }\n              e.pop = pop - e.deaths;\n              e.population = util.formatPopulation(e.pop);\n              e.households = util.formatPopulation(houses);\n              e.area = area;\n              e.density = util.formatPopulation(density);\n              e.cases_per_cap = util.formatPopulation(e.cases / e.pop * 1e6);\n              e.cases_per_house = util.formatPopulation(e.cases / houses * 1e6);\n              e.cases_per_area = e.cases / area;\n              e.cases_per_dens = util.formatPopulation(e.cases / density);\n              e.deaths_per_cap = util.formatPopulation(e.deaths / e.pop * 1e6);\n              e.deaths_per_house = util.formatPopulation(e.deaths / houses * 1e6);\n              e.deaths_per_area = e.deaths / area;\n              e.deaths_per_dens = util.formatPopulation(e.deaths / density);\n            });\n          });\n        }\n      }\n\n      console.log(\"Combo Data Updated.\");\n      return combo;\n    },\n    // Returns the GeoJSON being displayed on the map:\n    activeMap(){\n      return this.geoData[this.resolution];\n    },\n    // Returns the data being displayed:\n    activeData(){\n      // Find most recent data on or before selected day:\n      return this.comboData[this.resolution].filter( d => d.day.isSame(this.day, 'day') );\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n\n</style>\n"]}]}