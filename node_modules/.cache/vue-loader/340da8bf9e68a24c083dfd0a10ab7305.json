{"remainingRequest":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue?vue&type=style&index=0&id=3074bd5c&scoped=true&lang=scss&","dependencies":[{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue","mtime":1587353559409},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIn5sZWFmbGV0L2Rpc3QvbGVhZmxldC5jc3MiOwoK"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"map\">\n    <l-map\n      :center=\"[98.5795, 39.8283] /* Geographic Center of the US */ \"\n      :zoom=\"1\"\n      style=\"height: 500px;\"\n      :options=\"mapOptions\">\n        <l-choropleth-layer\n          :data=\"coreData\"\n          titleKey=\"county\"\n          idKey=\"fips\"\n          :value=\"value\"\n          :extraValues=\"extraValues\"\n          geojsonIdKey=\"fips\"\n          :geojson=\"outlines.counties\"\n          :colorScale=\"colorScale\">\n            <template slot-scope=\"props\">\n              <l-info-control\n                :item=\"props.currentItem\"\n                :unit=\"props.unit\"\n                title=\"Region\"\n                placeholder=\"Hover over a region\"/>\n              <l-reference-chart\n                title=\"Girls school enrolment\"\n                :colorScale=\"colorScale\"\n                :min=\"props.min\"\n                :max=\"props.max\"\n                position=\"topright\"/>\n            </template>\n        </l-choropleth-layer>\n    </l-map>\n  </div>\n</template>\n\n<script>\nimport { LMap } from 'vue2-leaflet'\nimport { InfoControl, ReferenceChart, ChoroplethLayer } from 'vue-choropleth'\n\n// Load Map Data:\n// GeoJSON Map Outlines at varying resolutions:\nimport outline_us from '@/data/geo/us_outline_20m.js'\nimport outline_states from '@/data/geo/us_states_20m.js'\nimport outline_counties from '@/data/geo/us_counties_20m_backup.js'\nimport outline_congress from '@/data/geo/us_congressional2010_20m.js'\n\nexport default {\n  name: 'Map',\n  props: {\n    coreData: { // Core Data to be Represented\n      type: Array,\n      required: true\n    },\n  },\n  data(){\n    return {\n      outlines: {\n        US: outline_us,\n        states: outline_states,\n        counties: outline_counties,\n        congress: outline_congress\n      },\n      colorScale: [\"e7d090\", \"e9ae7b\", \"de7062\"],\n      currentStrokeColor: '3d3213',\n      value: {\n        key: \"cases\",\n        metric: \" Confirmed Cases\"\n      },\n      extraValues: [{\n        key: \"deaths\",\n        metric: \"Confirmed Deaths\"\n      }],\n      mapOptions: {\n        attributionControl: false\n      }\n    }\n  },\n  components: {\n    'l-map': LMap,\n    'l-info-control': InfoControl,\n    'l-reference-chart': ReferenceChart,\n    'l-choropleth-layer': ChoroplethLayer\n  },\n  mounted() {\n  },\n  methods: {\n    formatRawData(){\n      // Adds fips field to county data:\n      this.outlines.counties.features.forEach( c => {\n        // Create fips identifier:\n        c.properties.fips = c.properties.GEO_ID.substr(-5);\n        // Remove redundant and unnecessary properties:\n        delete c.properties.GEO_ID;\n        delete c.properties.COUNTY;\n        delete c.properties.LSAD;\n        delete c.properties.CENSUSAREA;\n      });\n      let str = JSON.stringify(this.outlines.counties, null, 1);\n      //str = str.replace(/(?<!},)\\n\\w*(?=[^{])/g, ' ');\n      str = str.replace(/\\n/g, ' ');\n      str = str.replace(/ +/g, ' ');\n      str = str.replace(/}, *{/g, '}\\n,\\n{');\n      console.log(str);\n      console.log(\"Counties Formatted.\");\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  @import \"~leaflet/dist/leaflet.css\";\n\n</style>\n"]}]}