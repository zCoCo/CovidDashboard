{"remainingRequest":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue?vue&type=style&index=0&id=3074bd5c&scoped=true&lang=scss&","dependencies":[{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/src/components/Map.vue","mtime":1587452926747},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/connorcolombo/Documents/PKBACK/GitHub/CovidDashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICJ+bGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzIjsKCg=="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8JA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"map\">\n    <l-map\n      :center=\"[39.8283, -98.5795] /* Geographic Center of the US */ \"\n      :zoom=\"4\"\n      style=\"height: 500px;\"\n      :options=\"mapOptions\">\n        <l-choropleth-layer\n          :data=\"coreData\"\n          titleKey=\"county\"\n          idKey=\"fips\"\n          :value=\"value\"\n          :extraValues=\"extraValues\"\n          geojsonIdKey=\"GEOID\"\n          strokeColor=\"9c9c9c\"\n          currentStrokeColor=\"efefef\"\n          :strokeWidth=\"0.3\"\n          :currentStrokeWidth=\"2\"\n          :geojson=\"mapData\"\n          :colorScale=\"colorScale\">\n            <template slot-scope=\"props\">\n              <l-info-control\n                :item=\"props.currentItem\"\n                :unit=\"props.unit\"\n                title=\"Region Data\"\n                placeholder=\"Hover over a region\"/>\n              <l-reference-chart\n                :title=\"value.metric.trim()\"\n                :colorScale=\"colorScale\"\n                :min=\"props.min\"\n                :max=\"props.max\"\n                position=\"topright\"/>\n            </template>\n        </l-choropleth-layer>\n    </l-map>\n  </div>\n</template>\n\n<script>\nimport { LMap } from 'vue2-leaflet'\nimport { InfoControl, ReferenceChart, ChoroplethLayer } from 'vue-choropleth'\n\n// Load Map Data:\n// GeoJSON Map Outlines at varying resolutions:\nimport outline_us from '@/data/geo/us_outline_20m.js'\n// import outline_states from '@/data/geo/us_states_20m.js'\n// import outline_counties from '@/data/geo/us_counties_20m_fips.js'\n// import outline_congress from '@/data/geo/us_congressional2010_20m.js'\n\nexport default {\n  name: 'Map',\n  props: {\n    value: {\n      type: Object,\n      required: true\n    },\n    geoData: { // Core Data to be Represented\n      type: Object,\n      required: true\n    },\n    coreData: { // Core Data to be Represented\n      type: Array,\n      required: true\n    },\n  },\n  data(){\n    return {\n      colorScale: ['#f6e5c5','#f7b538', '#e89f3c','#de864a', '#d6695c','#c2574c', '#ad453c','#98342e', '#822420','#6c1414', '#540804'],\n      mapOptions: {\n        attributionControl: true\n      }\n    }\n  },\n  components: {\n    'l-map': LMap,\n    'l-info-control': InfoControl,\n    'l-reference-chart': ReferenceChart,\n    'l-choropleth-layer': ChoroplethLayer\n  },\n  mounted() {\n  },\n  methods: {\n    /*\n    Uncomment if you're loading new US GeoJSON data and want to format and\n    condense it while still allowing for fast loading.\n    formatRawData(){\n      // Adds fips field to county data:\n      this.outlines.counties.features.forEach( c => {\n        // Create fips identifier:\n        c.properties.fips = c.properties.GEO_ID.substr(-5);\n        // Remove redundant and unnecessary properties:\n        delete c.properties.GEO_ID;\n        delete c.properties.COUNTY;\n        delete c.properties.LSAD;\n        delete c.properties.CENSUSAREA;\n      });\n      let str = JSON.stringify(this.outlines.counties, null, 1);\n      //str = str.replace(/(?<!},)\\n\\w*(?=[^{])/g, ' '); // <- different formatting option\n      str = str.replace(/\\n/g, ' ');\n      str = str.replace(/ +/g, ' ');\n      str = str.replace(/}, *{/g, '}\\n,\\n{');\n      console.log(str);\n      console.log(\"Counties Formatted.\");\n    }*/\n  },\n  computed: {\n    // Return the map data to be displayed:\n    mapData(){\n      if(Object.keys(this.geoData).length === 0){ // If empty GeoData was given, display US outline by default\n        return outline_us;\n      }\n      return this.geoData;\n    },\n\n    extraValues(){\n      // List of elements that are guaranteed to be in the extra values list:\n      let must = [\n        {\n          key: \"collection_date\",\n          metric: \"(closest prior collection date)\"\n        }\n      ];\n      // List of elements that should be in the extra values list:\n      let extras = [\n        {\n          key: 'cases',\n          metric: ' Confirmed Cases'\n        },\n        {\n          key: 'deaths',\n          metric: ' Confirmed Deaths'\n        },\n        {\n          key: 'population',\n          metric: ' People'\n        },\n        {\n          key: 'households',\n          metric: ' Households'\n        },\n        {\n          key: 'density',\n          metric: ' People / Sq. Mile'\n        }\n      ];\n      // Add useful fields but don't repeat the main value:\n      for(let i = 0; i < extras.length; ++i){\n        if(this.value.key === extras[i].key){\n          extras.splice(i,1);\n        }\n      }\n      return [...extras, ...must];\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n  @import \"~leaflet/dist/leaflet.css\";\n\n</style>\n"]}]}